[{"path":"https://nicoesve.github.io/latexSymb/articles/vignette1.html","id":"example","dir":"Articles","previous_headings":"","what":"Example","title":"Use R to Write LaTeX Code in R Markdown Documents","text":"best explained example. Consider following equation, encountered Riemannian geometry: ddt⟨V,W⟩=⟨DVdt,W⟩+⟨V,DWdt⟩ \\frac{d}{dt} \\left \\langle V,W \\right \\rangle = \\left \\langle \\frac{DV}{dt}, W \\right \\rangle + \\left \\langle V, \\frac{DW}{dt} \\right \\rangle straightforward way code : use latexSymb, proceed follows instead. First create objects class latex_symb represent vector fields: write R functions represent mathematical concepts used: inner product, covariant derivative ordinary derivative: put everything equation environment: caveat chuncks options results='asis', include=FALSE obtain plain LaTeX code.","code":"\\frac{d}{dt} \\left \\langle V,W \\right \\rangle = \\left \\langle \\frac{DV}{dt}, W \\right \\rangle + \\left \\langle V, \\frac{DW}{dt} \\right \\rangle library(latexSymb) ## Loading required package: purrr ##  ## Attaching package: 'latexSymb' ## The following objects are masked from 'package:base': ##  ##     -, *, /, ^, + vf1 <- lsymb(\"V\") vf2 <- lsymb(\"W\") inner <- function(x,y) ang(lsymb(x, \",\", y)) cov.der <- function(x) lsymb(\"D\", x)/\"dt\" ddt <- function(x) lsymb(\"d\", x)/\"dt\" lenv(\"equation\",       lsymb(            ddt(inner(vf1, vf2)),             \"=\",             inner(cov.der(vf1), vf2) + inner(vf1, cov.der(vf2))      ) ) ## [1] \"\\\\begin{equation}\\\\n\\\\frac{ d \\\\langle V , W \\\\rangle }{ dt } = \\\\langle \\\\frac{ D V }{ dt } , W \\\\rangle + \\\\langle V , \\\\frac{ D W }{ dt } \\\\rangle\\\\n\\\\end{equation}\""},{"path":"https://nicoesve.github.io/latexSymb/articles/vignette1.html","id":"unpacking","dir":"Articles","previous_headings":"Example","what":"Unpacking","title":"Use R to Write LaTeX Code in R Markdown Documents","text":"Let us unpack . Notice first definition cov.der important feature used. Namely, / function overwritten latexSymb either arguments objects class latex_symb, output another object class uses frac expect. also done +, -, * ^. Additionally, adds support use subscripts. Also, numerator cov.der, lsymb(\"D\", x) concatenates string \"D\" object x, wraps result new latex_symb object. , ’s use latexSymb function ang, provides dynamic enclosing inner product, thus avoiding need write left right. functions br, sqbr pths braces, square brackets parentheses respectively. Finally, function lenv spares user writing begin end. second argument list vector, whose components represent different lines. , instance, written also latex_symb also exposes il, surrounds expressions dollar signs, inline math environments.","code":"lenv(\"align*\",       c(        lsymb(ddt(inner(vf1, vf2)), \"&=\\\\\\\\\"),        lsymb(\"&=\", inner(cov.der(vf1), vf2) + inner(vf1, cov.der(vf2)))      ) ) ## [1] \"\\\\begin{align*}\\\\n\\\\frac{ d \\\\langle V , W \\\\rangle }{ dt } &=\\\\\\\\\\\\n&= \\\\langle \\\\frac{ D V }{ dt } , W \\\\rangle + \\\\langle V , \\\\frac{ D W }{ dt } \\\\rangle\\\\n\\\\end{align*}\""},{"path":"https://nicoesve.github.io/latexSymb/articles/vignette1.html","id":"discussion","dir":"Articles","previous_headings":"","what":"Discussion","title":"Use R to Write LaTeX Code in R Markdown Documents","text":"whole, latexSymb may significantly reduce amount code users write compared raw LaTeX. think makes readable hence less prone errors. Users can mostly write mean, want see. Additionally, latexSymb limited RMarkdown. Actually, probably makes sense .Rtex documents. case, format knit can handle . Finally, complicated equations, R’s piping make things even readable.","code":""},{"path":"https://nicoesve.github.io/latexSymb/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Nicolas Escobar. Author, maintainer.","code":""},{"path":"https://nicoesve.github.io/latexSymb/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Escobar N (2024). latexSymb: Use 'R' Write 'LaTeX' Code. R package version 0.3.0, https://nicoesve.github.io/latexSymb/.","code":"@Manual{,   title = {latexSymb: Use 'R' to Write 'LaTeX' Code},   author = {Nicolas Escobar},   year = {2024},   note = {R package version 0.3.0},   url = {https://nicoesve.github.io/latexSymb/}, }"},{"path":"https://nicoesve.github.io/latexSymb/index.html","id":"use-r-to-write-latex-code-in-r-markdown-documents","dir":"","previous_headings":"","what":"Use R to Write LaTeX Code","title":"Use R to Write LaTeX Code","text":"Technical reports written R Markdown usually include mathematical symbols. R Markdown addresses supporting inclussion raw LaTeX code. Depending desired output format, code gets rendered LaTeX engine. feature convenient. issue writing LaTeX code can cumbersome result usually hard read. Although use newcommand can alleviate , practice people use infrequently. idea behind package ’re writing R Markdown report, ’re already using R, might well use write LaTeX code well.","code":""},{"path":"https://nicoesve.github.io/latexSymb/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Use R to Write LaTeX Code","text":"best explained example. Consider following equation, encountered Riemannian geometry: ddt⟨V,W⟩=⟨DVdt,W⟩+⟨V,DWdt⟩ \\frac{d}{dt} \\left \\langle V,W \\right \\rangle = \\left \\langle \\frac{DV}{dt}, W \\right \\rangle + \\left \\langle V, \\frac{DW}{dt} \\right \\rangle straightforward way code : {latex} \\frac{d}{dt} \\left \\langle V,W \\right \\rangle = \\left \\langle \\frac{DV}{dt}, W \\right \\rangle + \\left \\langle V, \\frac{DW}{dt} \\right \\rangle use latexSymb, proceed follows instead. First create objects class latex_symb represent vector fields: {r} library(latexSymb) vf1 <- lsymb(\"V\") vf2 <- lsymb(\"W\") write R functions represent mathematical concepts used: inner product, covariant derivative ordinary derivative: {r} inner <- function(x,y) ang(lsymb(x, \",\", y)) cov.der <- function(x) lsymb(\"D\", x)/\"dt\" ddt <- function(x) lsymb(\"d\", x)/\"dt\" put everything equation environment: {r} lenv(\"equation\",       lsymb(            ddt(inner(vf1, vf2)),             \"=\",             inner(cov.der(vf1), vf2) + inner(vf1, cov.der(vf2))      ) ) caveat chuncks options results='asis', include=FALSE obtain plain LaTeX code.","code":""},{"path":"https://nicoesve.github.io/latexSymb/index.html","id":"unpacking","dir":"","previous_headings":"Example","what":"Unpacking","title":"Use R to Write LaTeX Code","text":"Let us unpack . Notice first definition cov.der important feature used. Namely, / function overwritten latexSymb either arguments objects class latex_symb, output another object class uses frac expect. also done +, -, * ^. Additionally, adds support use subscripts. Also, numerator cov.der, lsymb(\"D\", x) concatenates string \"D\" object x, wraps result new latex_symb object. , ’s use latexSymb function ang, provides dynamic enclosing inner product, thus avoiding need write left right. functions br, sqbr pths braces, square brackets parentheses respectively. Finally, function lenv spares user writing begin end. second argument list vector, whose components represent different lines. , instance, written also {r} lenv(\"align*\",       c(        lsymb(ddt(inner(vf1, vf2)), \"&=\\\\\\\\\"),        lsymb(\"&=\", inner(cov.der(vf1), vf2) + inner(vf1, cov.der(vf2)))      ) ) latex_symb also exposes il, surrounds expressions dollar signs, inline math environments.","code":""},{"path":"https://nicoesve.github.io/latexSymb/index.html","id":"discussion","dir":"","previous_headings":"","what":"Discussion","title":"Use R to Write LaTeX Code","text":"whole, latexSymb may significantly reduce amount code users write compared raw LaTeX. think makes readable hence less prone errors. Users can mostly write mean, want see. Additionally, latexSymb limited RMarkdown. Actually, probably makes sense .Rtex documents. case, format knit can handle . Finally, complicated equations, R’s piping make things even readable.","code":""},{"path":[]},{"path":"https://nicoesve.github.io/latexSymb/reference/enclosing.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"LaTeX Enclosings — pths","text":"","code":"pths(x) br(x) sqbr(x) ang(x)"},{"path":"https://nicoesve.github.io/latexSymb/reference/enclosing.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"LaTeX Enclosings — pths","text":"x object can passed .character.","code":""},{"path":"https://nicoesve.github.io/latexSymb/reference/enclosing.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"LaTeX Enclosings — pths","text":"object class latex_symb whose repr x's repr enclosed corresponding symbols.","code":""},{"path":"https://nicoesve.github.io/latexSymb/reference/enclosing.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"LaTeX Enclosings — pths","text":"","code":"al <- lsymb(\"\\\\alpha\") pths(al) #> [1] \"\\\\left( \\\\alpha \\\\right)\" br(al) #> [1] \"\\\\lbrace \\\\alpha \\\\rbrace\" sqbr(al) #> [1] \"\\\\left[ \\\\alpha \\\\right]\" ang(al) #> [1] \"\\\\langle \\\\alpha \\\\rangle\""},{"path":[]},{"path":"https://nicoesve.github.io/latexSymb/reference/environments.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"LaTeX Environments — il","text":"","code":"il(x) lenv(name, rows)"},{"path":"https://nicoesve.github.io/latexSymb/reference/environments.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"LaTeX Environments — il","text":"x object class latex_symb name name LaTeX environment. instance, align gather . rows list objects can passed .character.","code":""},{"path":"https://nicoesve.github.io/latexSymb/reference/environments.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"LaTeX Environments — il","text":"il, x's repr surrounded dollar signs. lenv, multiline string whose lines : 1. \\begin statement name; 2. character representation row; 3. \\end statement name","code":""},{"path":"https://nicoesve.github.io/latexSymb/reference/environments.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"LaTeX Environments — il","text":"","code":"al <- lsymb(\"\\\\alpha\") be <- lsymb(\"\\\\beta\") il(al) #> [1] \"$\\\\alpha$\" lenv(\"align\",      c(       lsymb(al^2 - be^2, \"&=\", 0, \"\\\\\\\\\"),       lsymb(pths(al - be)*pths(al + be), \"&=\", 0)      ) )  #> [1] \"\\\\begin{align}\\\\n\\\\alpha ^{ 2 } - \\\\beta ^{ 2 } &= 0 \\\\\\\\\\\\n\\\\left( \\\\alpha - \\\\beta \\\\right) \\\\left( \\\\alpha + \\\\beta \\\\right) &= 0\\\\n\\\\end{align}\""},{"path":[]},{"path":"https://nicoesve.github.io/latexSymb/reference/main.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create, print and turn to string objects of class latex_symb — lsymb","text":"","code":"lsymb(...) # S3 method for class 'latex_symb' print(x, ...) # S3 method for class 'latex_symb' as.character(x, ...)"},{"path":"https://nicoesve.github.io/latexSymb/reference/main.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create, print and turn to string objects of class latex_symb — lsymb","text":"... Objects can passed .character. x object class latex_symb","code":""},{"path":"https://nicoesve.github.io/latexSymb/reference/main.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create, print and turn to string objects of class latex_symb — lsymb","text":"lsymb returns object class latex_symb. S3 class, whose objects lists single component called repr. repr LaTeX code object, obtained pasting character representations arguments. print.lsymb passes repr first argument, plus additional arguments, print. returned value whatever print returns. .character.lsymb passes repr first argument, plus additional arguments, .character. returned value whatever .character returns.","code":""},{"path":"https://nicoesve.github.io/latexSymb/reference/main.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create, print and turn to string objects of class latex_symb — lsymb","text":"","code":"al <- lsymb(\"\\\\alpha\") print(al) #> [1] \"\\\\alpha\" as.character(al) #> [1] \"\\\\alpha\""},{"path":[]},{"path":"https://nicoesve.github.io/latexSymb/reference/operators.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Arithmetic — +","text":"","code":"a + b a - b a/b a * b a^b under(a,b)"},{"path":"https://nicoesve.github.io/latexSymb/reference/operators.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Arithmetic — +","text":"object can passed .character b object can passed .character","code":""},{"path":"https://nicoesve.github.io/latexSymb/reference/operators.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Arithmetic — +","text":"object class latex_symb whose repr : + -, concatenation 's repr, corresponding arithmetic symbol, b's repr. *, concatenation repr, space . /, b's repr inside \\frac{}{}. ^, 's repr, caret b's repr braces. , 's repr, underscore b's repr braces","code":""},{"path":"https://nicoesve.github.io/latexSymb/reference/operators.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Arithmetic — +","text":"","code":"a <- lsymb(\"\\\\alpha\") b <- lsymb(\"\\\\beta\") a+b #> [1] \"\\\\alpha + \\\\beta\" a-b #> [1] \"\\\\alpha - \\\\beta\" a*b #> [1] \"\\\\alpha \\\\beta\" a/b #> [1] \"\\\\frac{ \\\\alpha }{ \\\\beta }\" a^b #> [1] \"\\\\alpha ^{ \\\\beta }\" under(a,b) #> [1] \"\\\\alpha _{ \\\\beta }\""}]
